#!/usr/bin/env python3
"""
Generate standalone dashboard HTML with embedded data.
This creates a dashboard.html that works without a web server.
"""

import json
import sys
import io
from pathlib import Path
from datetime import datetime

# Fix Windows console encoding
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

def load_latest_analysis(max_months=6):
    """Load analysis results for the last N months."""

    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    output_dir = project_root / "output"

    if not output_dir.exists():
        print(f"‚ùå Output directory not found: {output_dir}")
        return None

    # Find all JSON files grouped by month
    all_data = {}
    month_dirs = sorted(output_dir.glob("*/"), reverse=True)[:max_months]

    for month_dir in month_dirs:
        if not month_dir.is_dir():
            continue

        month_name = month_dir.name
        json_files = sorted(month_dir.glob("analysis_results_*.json"), reverse=True)

        if not json_files:
            continue

        # Load the most recent file for this month
        latest_file = json_files[0]

        try:
            with open(latest_file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            all_data[month_name] = {
                'data': data,
                'file': latest_file,
                'filename': latest_file.name
            }

            print(f"üìÑ Loaded {month_name}: {latest_file.name}")

        except Exception as e:
            print(f"‚ö†Ô∏è  Failed to load {latest_file}: {e}")
            continue

    if not all_data:
        print("‚ùå No analysis results found")
        return None

    return all_data

def create_manifest():
    """Create manifest data of all available months."""

    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    output_dir = project_root / "output"

    manifest = {
        "generated_at": datetime.now().isoformat(),
        "months": {}
    }

    for month_dir in sorted(output_dir.glob("*/"), reverse=True):
        if not month_dir.is_dir():
            continue

        month_name = month_dir.name
        json_files = []

        for json_file in sorted(month_dir.glob("analysis_results_*.json"), reverse=True):
            file_stat = json_file.stat()
            json_files.append({
                "filename": json_file.name,
                "size": file_stat.st_size,
                "modified": datetime.fromtimestamp(file_stat.st_mtime).isoformat()
            })

        if json_files:
            manifest["months"][month_name] = {
                "count": len(json_files),
                "files": json_files
            }

    return manifest

def generate_dashboard(max_months=6):
    """Generate standalone dashboard HTML."""

    all_data = load_latest_analysis(max_months)
    if not all_data:
        return False

    manifest = create_manifest()

    # Get the most recent month as default
    latest_month = list(all_data.keys())[0]
    latest_data = all_data[latest_month]

    # Prepare multi-month data structure
    embedded_data = {}
    for month, month_info in all_data.items():
        embedded_data[month] = month_info['data']

    # Read the dashboard template
    script_dir = Path(__file__).parent
    template_path = script_dir / "dashboard_template.html"

    if not template_path.exists():
        print(f"‚ùå Template not found: {template_path}")
        return False

    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()

    # Embed the data in the HTML
    data_script = f"""
    <script>
        // Embedded analysis data - generated by generate_dashboard.py
        // Contains data for up to {max_months} months
        const EMBEDDED_DATA_ALL_MONTHS = {json.dumps(embedded_data, ensure_ascii=False, indent=2)};

        const EMBEDDED_MANIFEST = {json.dumps(manifest, ensure_ascii=False, indent=2)};

        const DATA_SOURCE = {{
            defaultMonth: "{latest_month}",
            totalMonths: {len(all_data)},
            generated: "{datetime.now().isoformat()}"
        }};

        const CONFIG = {{
            maxMonthsToLoad: {max_months},
            maxRecentReports: 6  // Can be made configurable later
        }};
    </script>
    """

    # Insert data script before closing </head> tag
    html = template.replace('</head>', f'{data_script}\n</head>')

    # Write output
    output_path = script_dir / "dashboard.html"

    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html)

        print(f"‚úÖ Dashboard generated successfully: {output_path}")
        print(f"   Default month: {latest_month}")
        print(f"   Total months loaded: {len(all_data)}")
        total_reports = sum(data['data']['analysis_metadata']['total_files'] for data in all_data.values())
        print(f"   Total reports: {total_reports}")
        print(f"   Available months: {len(manifest['months'])}")
        print(f"\nüí° Open {output_path} in your browser")

        return True

    except Exception as e:
        print(f"‚ùå Failed to write dashboard: {e}")
        return False

if __name__ == "__main__":
    import argparse

    # Load config to get max_months parameter
    try:
        script_dir = Path(__file__).parent
        project_root = script_dir.parent
        config_path = project_root / "config" / "main_config.yaml"

        max_months = 6  # default

        if config_path.exists():
            import yaml
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                max_months = config.get('dashboard', {}).get('max_months_to_load', 6)
                print(f"üìù Using max_months_to_load from config: {max_months}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not load config, using default max_months=6: {e}")
        max_months = 6

    success = generate_dashboard(max_months)
    sys.exit(0 if success else 1)
